<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mo1451.mapper.EvaluateMapper">
  <resultMap id="BaseResultMap" type="com.mo1451.model.Evaluate">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="complex" jdbcType="INTEGER" property="complex" />
    <result column="cost" jdbcType="INTEGER" property="cost" />
    <result column="sim" jdbcType="INTEGER" property="sim" />
    <result column="intell" jdbcType="INTEGER" property="intell" />
    <result column="equip" jdbcType="INTEGER" property="equip" />
    <result column="feasi" jdbcType="INTEGER" property="feasi" />
    <result column="soluid" jdbcType="INTEGER" property="soluid" />
    <result column="wordid" jdbcType="INTEGER" property="wordid" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, complex, cost, sim, intell, equip, feasi, soluid, wordid
  </sql>
  <select id="selectByExample" parameterType="com.mo1451.model.EvaluateExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from evaluate
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from evaluate
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from evaluate
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.mo1451.model.EvaluateExample">
    delete from evaluate
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.mo1451.model.Evaluate">
    insert into evaluate (id, complex, cost, 
      sim, intell, equip, 
      feasi, soluid, wordid
      )
    values (#{id,jdbcType=INTEGER}, #{complex,jdbcType=INTEGER}, #{cost,jdbcType=INTEGER}, 
      #{sim,jdbcType=INTEGER}, #{intell,jdbcType=INTEGER}, #{equip,jdbcType=INTEGER}, 
      #{feasi,jdbcType=INTEGER}, #{soluid,jdbcType=INTEGER}, #{wordid,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.mo1451.model.Evaluate">
    insert into evaluate
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="complex != null">
        complex,
      </if>
      <if test="cost != null">
        cost,
      </if>
      <if test="sim != null">
        sim,
      </if>
      <if test="intell != null">
        intell,
      </if>
      <if test="equip != null">
        equip,
      </if>
      <if test="feasi != null">
        feasi,
      </if>
      <if test="soluid != null">
        soluid,
      </if>
      <if test="wordid != null">
        wordid,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="complex != null">
        #{complex,jdbcType=INTEGER},
      </if>
      <if test="cost != null">
        #{cost,jdbcType=INTEGER},
      </if>
      <if test="sim != null">
        #{sim,jdbcType=INTEGER},
      </if>
      <if test="intell != null">
        #{intell,jdbcType=INTEGER},
      </if>
      <if test="equip != null">
        #{equip,jdbcType=INTEGER},
      </if>
      <if test="feasi != null">
        #{feasi,jdbcType=INTEGER},
      </if>
      <if test="soluid != null">
        #{soluid,jdbcType=INTEGER},
      </if>
      <if test="wordid != null">
        #{wordid,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.mo1451.model.EvaluateExample" resultType="java.lang.Long">
    select count(*) from evaluate
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update evaluate
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.complex != null">
        complex = #{record.complex,jdbcType=INTEGER},
      </if>
      <if test="record.cost != null">
        cost = #{record.cost,jdbcType=INTEGER},
      </if>
      <if test="record.sim != null">
        sim = #{record.sim,jdbcType=INTEGER},
      </if>
      <if test="record.intell != null">
        intell = #{record.intell,jdbcType=INTEGER},
      </if>
      <if test="record.equip != null">
        equip = #{record.equip,jdbcType=INTEGER},
      </if>
      <if test="record.feasi != null">
        feasi = #{record.feasi,jdbcType=INTEGER},
      </if>
      <if test="record.soluid != null">
        soluid = #{record.soluid,jdbcType=INTEGER},
      </if>
      <if test="record.wordid != null">
        wordid = #{record.wordid,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update evaluate
    set id = #{record.id,jdbcType=INTEGER},
      complex = #{record.complex,jdbcType=INTEGER},
      cost = #{record.cost,jdbcType=INTEGER},
      sim = #{record.sim,jdbcType=INTEGER},
      intell = #{record.intell,jdbcType=INTEGER},
      equip = #{record.equip,jdbcType=INTEGER},
      feasi = #{record.feasi,jdbcType=INTEGER},
      soluid = #{record.soluid,jdbcType=INTEGER},
      wordid = #{record.wordid,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.mo1451.model.Evaluate">
    update evaluate
    <set>
      <if test="complex != null">
        complex = #{complex,jdbcType=INTEGER},
      </if>
      <if test="cost != null">
        cost = #{cost,jdbcType=INTEGER},
      </if>
      <if test="sim != null">
        sim = #{sim,jdbcType=INTEGER},
      </if>
      <if test="intell != null">
        intell = #{intell,jdbcType=INTEGER},
      </if>
      <if test="equip != null">
        equip = #{equip,jdbcType=INTEGER},
      </if>
      <if test="feasi != null">
        feasi = #{feasi,jdbcType=INTEGER},
      </if>
      <if test="soluid != null">
        soluid = #{soluid,jdbcType=INTEGER},
      </if>
      <if test="wordid != null">
        wordid = #{wordid,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.mo1451.model.Evaluate">
    update evaluate
    set complex = #{complex,jdbcType=INTEGER},
      cost = #{cost,jdbcType=INTEGER},
      sim = #{sim,jdbcType=INTEGER},
      intell = #{intell,jdbcType=INTEGER},
      equip = #{equip,jdbcType=INTEGER},
      feasi = #{feasi,jdbcType=INTEGER},
      soluid = #{soluid,jdbcType=INTEGER},
      wordid = #{wordid,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>